#!/usr/bin/env python

__author__ = 'jano'
"""
Operational script for Himawari 8. Assume the data is downloaded and supports following functionality:
    1. copies Himawari 8 data form ABOM CF 1.6 NetCDF files into GeoModel DFBSLOT  NC files that is
        builds the geostatioanry archive. This is achieved using h082geos function from himawari8.deployable.h082geos_archive.py
    2.reprojects the geostationary archive in  monthly LATLON 5x5 degrees segments DFBSLOT NC archive.
        This is achieved using the function h08geos2latlon from himawari8.deployable.geosarchive2latlonarchive.py

    Both,
    himawari8.deployable.h082geos_archive.py and
    himawari8.deployable.geosarchive2latlonarchive.py
    have the configuraion parameters inside themselves.

    For this reason this script contains configuration parameters from both scripts.

"""

import logging
import numpy as np
import sys
import traceback

import os
from himawari8.deployable.geosarchive2latlonarchive import geosarchive2latlonarchive
from himawari8.deployable.h082geos_operational import h082geos_operational_multislot
from himawari8.utils import DFBCOL, SLOTCOL
from himawari8.utils import is_running, is_writable, freespace
from nclib.core.const_defs import ST_TIME_MONTH, ST_DEG_5

from general_utils import basic_mail, daytimeconv

logger = logging.getLogger()
logging.basicConfig()


if __name__ == '__main__':

    ##################################################
    # IO FOLDERS
    ###################################################

    geos_incoming_nc_folder = '/home/jano/Desktop/himawari/OPERATIONAL/INCOMING/' #the folder where incoming NC geostationary dadat are downloaded
    geos_backup_nc_folder = '/home/jano/Desktop/himawari/OPERATIONAL/BACKUP'  # the folder where the incoming data is backed up
    geos_corrupted_nc_folder = '/home/jano/Desktop/himawari/OPERATIONAL/CORRUPTED/' # the folder where corrupted data is moved (only by geostationary script)
    geos_to_process_nc_folder = '/home/jano/Desktop/himawari/OPERATIONAL/TO_PROCESS/' #
    geos_processed_nc_folder = '/home/jano/Desktop/himawari/OPERATIONAL/PROCESSED/'
    geos_out_nc_folder = '/home/jano/Desktop/himawari/OPERATIONAL/OUTNC/GEOS/'
    geos_nc_prefix = 'H08GEOS'  # example of input geostationary DFBSLOT NC file H08GEOS_VIS064_2000__TMON_2015_10.nc
    latlon_out_nc_folder = '/home/jano/Desktop/himawari/OPERATIONAL/OUTNC/LATLON/'
    latlon_nc_prefix = 'H08LATLON'

    ##################################################
    # GENERAL PROCESSING
    ###################################################
    loglevel = 'DEBUG'
    '''  channel names
            ('01', 'VIS047_2000'), ('02', 'VIS051_2000'), ('03', 'VIS064_2000'), ('04', 'VIS086_2000'), ('05', 'VIS160_2000'), ('06', 'VIS229_2000'), ('07', 'IR390_2000'), ('08', 'IR620_2000'), ('09', 'IR690_2000'), ('10', 'IR730_2000'), ('11', 'IR860_2000'), ('12', 'IR960_2000'), ('13', 'IR104_2000'), ('14', 'IR112_2000'), ('15', 'IR124_2000'), ('16', 'IR133_2000'), ('18', 'VIS047_1000'), ('19', 'VIS051_1000'), ('20', 'VIS064_0500'), ('21', 'VIS086_1000')
        '''
    # currently we receive 20 channels where the first four are the downsampled version of the last four
    geos_channels_to_backup = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21]
    geos_channels_to_process = [3, 7, 8, 13, 15]

    latlon_channels_to_process = [3, 7, 8, 13, 15]  # so far numbers could be easily changed to channel names strings
    latlon_segments_to_process = [[57, 65, 8, 11], [57, 62, 12, 13], [57, 57, 19, 19], [58, 66, 20, 25],
                                  [64, 66, 26, 26], [69, 71, 24, 27]]  # JAPAN + AUSTRALIA + NEW ZEALAND


    #for operational processing latlonarchive_start_date and end_date, and slots
    #are returnd by build_geostationary_archive. It build_geos_archive is False then the next three variables has to be
    #supplied. Practically there is nor reason why build_geos_archive = false, unless thereis a aneed to reproject the data and the we recommend using the script
    #himawari8.deployable_build_geostationary_archive.py
    #CHEERS
    build_geos_archive = True
    build_latlon_archive = True
    latlonarchive_start_date = None
    latlonarchive_end_date = None
    latlonarchive_slots = None
    disk_label = 'HM001'





    ##################################################
    # COMPUTATIONAL PROCESSING
    ###################################################
    min_space_gb = 100 # this is the limit in GB for each folder that holds data
    geos_min_nc_age_secs = 1

    ##################################################
    # NC PROPERTIES
    ###################################################
    geos_nc_time_segtype = ST_TIME_MONTH
    geos_max_nc_age_days = 60
    geos_nc_chunksizes = [4, 8, 32, 32]

    latlon_nc_chunksizes = [4, 8, 32, 32]
    latlon_nc_time_segtype = ST_TIME_MONTH  # latlon time segmentation type
    latlon_nc_space_segtype = ST_DEG_5  # latlon space segmentation type DEG5X5
    latlon_nc_resolution = 2./60  # degrees for all channels, This could be also specific for each channel


    ##################################################
    # DATABASE
    ###################################################
    dbengine = 'postgresql'
    host = 'dbsatarchive'
    database = 'himawari_archive'
    password = 'itNov6'
    user = 'sat_oper'
    port = 5432
    conn_dict = {'dbengine': dbengine, 'host': host, 'port': port, 'database': database, 'user': user, 'password': password}

    ##################################################
    # EMAIL
    ###################################################

    # email_receivers = ['tomas.cebecauer@geomodel.eu', 'ioan.ferencik@geomodel.eu']
    email_receivers = ['ioan.ferencik@geomodel.eu']
    hostname = os.uname()[1]
    try:
        logger.setLevel(loglevel)
        ipid = os.getpid()
        # check if this script is running
        logger.debug('Checking if %s is running already...' % os.path.abspath(__file__))
        isrunning, pid, start_s_time = is_running(os.path.abspath(__file__), ipid)
        logger.debug('%s' % ('YES' if isrunning else 'NO'))
        if isrunning:
            if '-' in start_s_time:  #script is running for more than one day, send message
                sday, stime = start_s_time.split('-')
                if int(sday) > 3:
                    basic_mail.mail_process_message_ssl(sender_from='Himawari8 operational on {0}'.format(hostname), reciever_to=email_receivers,
                                                        subject='Himawari operational processing warning',
                                                        message='The script %s is running for %s day(s) and %s' % (
                                                        __file__, sday, stime))
            logger.info('The script is already running....bailing out')
            sys.exit(1)

        #logger.info('Checking connection to database')

        #build  alist of folders and make sure they exist and are writable. Otherwise it does not make sense to continue
        folder_list = [e for e in geos_incoming_nc_folder, geos_backup_nc_folder, geos_corrupted_nc_folder, geos_to_process_nc_folder, geos_processed_nc_folder, geos_out_nc_folder, latlon_out_nc_folder if e]
        #check folders exist and are writable and have space
        min_fldr_free_space = min_space_gb * (1024 ** 3)
        for fldr in folder_list:
            logger.debug('Checking if folder %s exists and is writable' % fldr)

            if not os.path.exists(fldr):
                basic_mail.mail_process_message_ssl(sender_from='Himawari8 operational on {0}'.format(hostname), reciever_to=email_receivers,
                                                    subject='Himawari operational processing error',
                                                    message='Directory %s does not exist' % (fldr))
                logger.debug('Folder %s does not exist.' % fldr)
                sys.exit(1)

            if not is_writable(fldr) and fldr != geos_incoming_nc_folder: #skip incoming
                basic_mail.mail_process_message_ssl(sender_from='Himawari8 operational on {0}'.format(hostname), reciever_to=email_receivers,
                                                    subject='Himawari operational processing error',
                                                    message='Folder %s is not writable' % (fldr))
                logger.debug('Folder %s is not writable.' % fldr)
                sys.exit(1)
            logger.debug('...yes')


            logger.debug('Checking if folder %s has enough min space [%s GB]. ' % (fldr, min_fldr_free_space / (1024 ** 3)))
            fldr_size = freespace(fldr)
            if fldr_size < min_fldr_free_space:
                basic_mail.mail_process_message_ssl(sender_from='Himawari8 operational on {0}'.format(hostname), reciever_to=email_receivers,
                                                    subject='Himawari operational processing warning',
                                                    message='Folder %s has less free space (GB) than %s ' % (fldr, min_space_gb))
                logger.info('mail was sent to warn the disk is running out of space')
                sys.exit(1)

            logger.debug('...yes')

        if build_geos_archive == True:
            processed_files = h082geos_operational_multislot(out_folder=geos_out_nc_folder,
                                          incoming_folder=geos_incoming_nc_folder,
                                          backup_folder=geos_backup_nc_folder,
                                          corrupted_folder=geos_corrupted_nc_folder,
                                          to_process_folder=geos_to_process_nc_folder,
                                          processed_folder=geos_processed_nc_folder,
                                          conn_dict=conn_dict,
                                          channels_to_backup=geos_channels_to_backup,
                                          channels_to_process=geos_channels_to_process,
                                          nc_chunksizes=geos_nc_chunksizes,
                                          email_receivers=email_receivers,
                                          min_nc_age_secs=geos_min_nc_age_secs,
                                          nc_time_segtype=geos_nc_time_segtype,
                                          nc_prefix=geos_nc_prefix,
                                          max_nc_age_days=geos_max_nc_age_days,
                                          log_level=loglevel)


        if build_latlon_archive == True:

            #compute the start_date, end_date and dfb from the results of ncfiles
            logger.debug(processed_files)
            if processed_files is not None:

                dfbs = processed_files[DFBCOL]
                latlonarchive_slots = np.unique(processed_files[SLOTCOL])
                start_dfb = dfbs.min()
                latlonarchive_start_date = daytimeconv.dfb2date(start_dfb).strftime('%Y%m%d')
                end_dfb = dfbs.max()
                latlonarchive_end_date = daytimeconv.dfb2date(end_dfb).strftime('%Y%m%d')

                geosarchive2latlonarchive(in_geos_nc_folder=geos_out_nc_folder, in_geos_nc_prefix=geos_nc_prefix,
                                               out_latlon_nc_folder=latlon_out_nc_folder,
                                               out_latlon_nc_prefix=latlon_nc_prefix,
                                               segments_to_process=latlon_segments_to_process,
                                               channels_to_process=latlon_channels_to_process,
                                               ll_start_date=latlonarchive_start_date,
                                               ll_end_date=latlonarchive_end_date,
                                               nc_latlon_time_segtype=latlon_nc_time_segtype,
                                               nc_latlon_space_segtype=latlon_nc_space_segtype,
                                               nc_latlon_chunksizes=latlon_nc_chunksizes,
                                               nc_latlon_resolution=latlon_nc_resolution,
                                               email_receivers=email_receivers, slots=latlonarchive_slots,
                                               log_level=loglevel)


            else:# check latlon settings, namely latlonarchive_start_date, latlonarchive_end_date and latlonarchive_slots
                if latlonarchive_start_date is not None and latlonarchive_end_date is not None and latlonarchive_slots is not None:



                    geosarchive2latlonarchive(in_geos_nc_folder=geos_out_nc_folder, in_geos_nc_prefix=geos_nc_prefix,
                                                   out_latlon_nc_folder=latlon_out_nc_folder,
                                                   out_latlon_nc_prefix=latlon_nc_prefix,
                                                   segments_to_process=latlon_segments_to_process,
                                                   channels_to_process=latlon_channels_to_process,
                                                   ll_start_date=latlonarchive_start_date,
                                                   ll_end_date=latlonarchive_end_date,
                                                   nc_latlon_time_segtype=latlon_nc_time_segtype,
                                                   nc_latlon_space_segtype=latlon_nc_space_segtype,
                                                   nc_latlon_chunksizes=latlon_nc_chunksizes,
                                                   nc_latlon_resolution=latlon_nc_resolution,
                                                   email_receivers=email_receivers, slots=latlonarchive_slots,
                                                   log_level=loglevel)



    except Exception as e:
        estr = 'Exception "{0}" occurred Himawari 8 operational processing'.format(e)
        traceback.print_exc(e)
        logger.error('1')
        basic_mail.mail_process_message_ssl(sender_from='Himawari8 operational on {0}'.format(hostname), reciever_to=email_receivers,subject='Himawari8 operational processing error.',message=estr)

        sys.exit(1)
