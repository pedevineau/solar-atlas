#! /usr/bin/env python

import datetime
import os
import sys
import numpy
import time

from general_utils import daytimeconv
from general_utils import basic_mail
from general_utils import latlon
from aerosols.model import atmosphere_param
from himawari8.sat_model import himawari_mdl_core
from himawari8.sat_model.utils import himawari_nc_latlontools
from general_utils import multiprocess


if __name__ == "__main__":
    mail_notification='tomas.cebecauer@solargis.com' #email address to send finish notification to, Use '' to avoid mail notification
    
    dfbStart = daytimeconv.yyyymmdd2dfb('20150731')
    dfbEnd = daytimeconv.yyyymmdd2dfb('20170331')

#    dfbToday = daytimeconv.date2dfb(datetime.datetime.now().date())
#    #for monthly reanalysis    
#    y,m,d = daytimeconv.dfb2ymd(dfbToday)
#    y,m,d = daytimeconv.dfb2ymd(daytimeconv.ymd2dfb(y, m, 1)-1)
#    dfbStart = daytimeconv.ymd2dfb(y,m,1)
#    dfbEnd = dfbToday
#
#    #for daily operational processing
#    dfbStart = dfbToday-2
#    dfbEnd = dfbToday

   
    slotStart = 1
    slotEnd = 144

    resolution =  2./60.
    segments_to_calculate = latlon.expand_segments([[71, 71, 21, 21]]) 
    
    
    #if  process_bbox specified - it overrides the segment
#    w, e, s, n, resolution = 135.+(0*2./60.), 135. +(1*2./60.), 40.-(1*2./60.), 40.-(0*2./60.), 2./60.   #UL corner
#    w, e, s, n, resolution = 135.+(1*2./60.), 135. +(2*2./60.), 35.+(1*2./60.), 35.+(2*2./60.), 2./60.   #LL corner
 #   w, e, s, n, resolution = 175.+(0*2./60.), 175. +(2*2./60.), -15.+(0*2./60.), -15.-(2*2./60.), 2./60.   #
#    w, e, s, n, resolution = 135., 135.5 , 35., 35.5, 2./60.   #LL corner
#    w, e, s, n, resolution = 135., 136. , 35.-(2*2./60.), 35., 2./60.   #LL corner
#    process_bbox=latlon.bounding_box(w, e, s, n, int(numpy.floor(((e-w)/resolution)+0.5)), int(numpy.floor(((n-s)/resolution)+0.5)), resolution)
    process_bbox=None
    
    
    
    delay_sec=5 # segment run delay of segment parallelization 
    do_parallel=True
    ncpus=4# minimum one worker on local machine if no servers
    
    
    
    segment_sizex=8; segment_sizey=8
    
    verbose = False
    
    #local path where all data are stored
    model_version = 'v20b'
    dem_data_path = "/data/model_data/data_dem/" 
    aod_path = '/data/model_data/data_aod/'
    out_data_path = '/data/model_data_himawari/data_output/'+model_version

    dem_data_path = "/home0/model_data_goes/data_geom/" 
    aod_path = '/home0/model_data/data_aod/'
    out_data_path = '/home1/model_data_himawari/data_output/'+model_version

    file_time_segmentation='month' # archseg month day
    
    #atmosphere section
    aod_ncfiles, wv_ncfiles = himawari_mdl_core.init_aod_nc_files_v21v()
    # ATMOSPHERE TYPES
    # primary_type : 1-rural (water and dust-like), 4-maritime (rural and sea salt), 5-urban (rural and soot-like), 6-tropospheric (rural mixture)
    # secondary_type : -9 for None or atmosphere type code
    # secondary_weight_file : number <0.0,1.0> or NC file with weight data
    atmosph=atmosphere_param.atmosphere_param(primary_type = 6, secondary_type = 5, secondary_weight_file = aod_path+'aod_urban_type_weight_v1.nc')
    atmosph.hourly_data_persistence = 0
    atmosph.aod_ncfiles = aod_ncfiles
    atmosph.wv_ncfiles = wv_ncfiles
    atmosph.aod_path = aod_path
    atmosph.do_smoothing=True
    atmosph.do_extreme_correction=True
#    atmosph.extreme_correction_params=[0.1,0.25,0.85,0.75]
    atmosph.extreme_correction_params=[0.0,0.6,1.0,0.85]
    
    
    
    ########################
    #end of inputs
    ########################

    #output data
    outdata_path_dict={"LB": out_data_path, "LBclass": out_data_path, "LBland": out_data_path, "CLI": out_data_path,\
                     "CI": out_data_path, "KTM": out_data_path, "GHIc": out_data_path, "GHI": out_data_path,\
                    "DNIc": out_data_path, "DNI": out_data_path, "GHIcor": out_data_path, "DNIcor": out_data_path, \
                    "CI_flag": out_data_path}

    
    #check AOI to calculate - only one segment (or intrasegemnt subset) is allowed
    if process_bbox is not None:
        seg_c, seg_r = latlon.get_5x5_seg(process_bbox.center()[0],process_bbox.center()[1])
        seg_bbox=latlon.get_5x5_seg_bbox(arow=seg_r, acol=seg_c, resolution=resolution)
        if not seg_bbox.contains(process_bbox):
            print ('AOI overlaps 2 or more 5x5 deg. data segments. Limit it one. Exit.')
            exit()
        print 'process box overrides the segments. '  
        segments_to_calculate=(([seg_c, seg_r],))
        
    if dfbStart>dfbEnd:
        print "Requested dates for calculation not coherent. Exit."
        exit()
    
        
    if ((not os.path.exists(dem_data_path)) or (os.path.isfile(dem_data_path))):
        print "Dem data path %s not found" % dem_data_path
        sys.exit()
        
        
    res=False
    if ((not os.path.exists(aod_path)) or (os.path.isfile(aod_path))):
        print "AOD data path %s not found" % aod_path
        sys.exit()
    if ((not os.path.exists(out_data_path)) or (os.path.isfile(out_data_path))):
        print "Output data path %s not found" % out_data_path
        sys.exit()
    
    
    list_succ=[]
    list_fail=[]
    aTotalStartTime = datetime.datetime.now()
    for seg_c, seg_r in segments_to_calculate:
        print 'seg(c,r): %d %d' %( seg_c, seg_r)
        if  process_bbox is not None:
            process_bbox_current = process_bbox
        else:
            process_bbox_current=latlon.get_5x5_seg_bbox(seg_r, seg_c, resolution, seg_size=5.)

        seg_bbox=latlon.get_5x5_seg_bbox(seg_r, seg_c, resolution, seg_size=5.)

        #suffix added to output NETCDF file names
        outdata_suffix="_c%d_r%d" % (seg_c, seg_r)
        
    #    aux data used in sat data classification %s auto replaced by region suffix
        auxdata_file_dict = {"altitude": [dem_data_path+"/dem_strm120.nc", "dem"]  }
    
        
        out_channels=("GHI", "GHIc", "DNI", "DNIc") # channels to write to output NC files
        in_channels=("KTM",)
    
    
        print "Using settings from", sys.argv[0]
        print "Model version", model_version
        print "Pre-defined AOI %s within 5x5 deg. data segment %d %d" % (str(process_bbox_current), seg_c, seg_r)
        print "Pre-defined dates:",daytimeconv.dfb2yyyymmdd(dfbStart), daytimeconv.dfb2yyyymmdd(dfbEnd)
        print "Pre-defined input slots:", slotStart, slotEnd
        print "Parallel processing:",do_parallel," number of CPUs:",ncpus
        print "Path - dem data:", dem_data_path
        print "Path - AOD:",aod_path 
        print "Path - output data:", out_data_path
        print "Output data suffix:",outdata_suffix
        print '---end of inputs---'
    
        

        #start segment processing
        try:
            out_files_dict = himawari_nc_latlontools.check_output_nc_files(dfbStart, dfbEnd, 1, 144, seg_bbox, outdata_path_dict, out_channels+in_channels, outdata_suffix, model_version=model_version, file_time_segmentation=file_time_segmentation)
        except:
            list_fail.append("c%d_r%d" % (seg_c, seg_r))
            continue
        if len(out_files_dict)<1:
            list_fail.append("c%d_r%d" % (seg_c, seg_r))
            print 'No output file. Skipping segment.',seg_c, seg_r
            continue
    
    
    
        if mail_notification != '':
            basic_mail.mail_process_message_ssl(reciever_to=mail_notification, message='processing segment started %d, %d.' % (seg_c, seg_r))
        ##################################
        #PROCESSING
        ##################################    
        aStartTime = datetime.datetime.now()
        print 'Start', aStartTime
        
        id="c%d_r%d" % (seg_c, seg_r)
        args=[dfbStart, dfbEnd, slotStart, slotEnd, atmosph, out_channels, auxdata_file_dict, out_files_dict, outdata_path_dict, outdata_suffix, process_bbox_current, seg_bbox] 
        kwargs={'do_parallel':do_parallel, 'ncpus':ncpus, 'segment_sizex':segment_sizex, 'segment_sizey':segment_sizey, 'file_time_segmentation':file_time_segmentation, 'verbose':verbose}
        
        
        result = himawari_mdl_core.sat_model_rast_noktm_pp(*args,**kwargs)
        if not(result):
            list_fail.append(id)
        else:
            list_succ.append(id)
        segment_processing_time = datetime.datetime.now() - aStartTime
        if verbose: 
            print 'End', datetime.datetime.now(), "Segment processing time:", segment_processing_time



    total_processing_time = datetime.datetime.now() - aTotalStartTime
    message='Processing all segments finished. \n'
    message+='Time: %s\n'%(str(total_processing_time))
    message+='Successfully processed:%d/%d\n'%(len(list_succ),len(list_succ)+len(list_fail))
    message+='Success segments: %s\n'%(', '.join(list_succ))
    message+='Failure segments: %s\n'%(', '.join(list_fail))
    if mail_notification != '':
        basic_mail.mail_process_message_ssl(reciever_to=mail_notification, message=message)
    print message
    exit()
