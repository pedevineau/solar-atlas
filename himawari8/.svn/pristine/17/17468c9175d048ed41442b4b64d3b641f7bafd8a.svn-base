import cf


import numpy

def test_create_field():
	# Dimension coordinates
	dim1 = cf.Coordinate(data=cf.Data(numpy.arange(10.), 'degrees'))
	dim1.standard_name = 'grid_latitude'

	dim0 = cf.Coordinate(data=cf.Data(numpy.arange(9.) + 20, 'degrees'))
	dim0.standard_name = 'grid_longitude'
	dim0.Data[-1] += 5
	bounds = cf.Data(numpy.array([dim0.Data.array-0.5, dim0.Data.array+0.5]).transpose((1,0)))
	bounds[-2,1] = 30
	bounds[-1,:] = [30, 36]
	dim0.insert_bounds(cf.CoordinateBounds(data=bounds))

	dim2 = cf.Coordinate(data=cf.Data(1.5), bounds=cf.Data([1, 2.]))
	dim2.standard_name = 'atmosphere_hybrid_height_coordinate'

	# Auxiliary coordinates
	aux0 = cf.Coordinate(data=cf.Data(10., 'm'))
	aux0.id = 'atmosphere_hybrid_height_coordinate_ak'
	aux0.insert_bounds(cf.Data([5, 15.], aux0.Units))

	aux1 = cf.Coordinate(data=cf.Data(20.))
	aux1.id = 'atmosphere_hybrid_height_coordinate_bk'
	aux1.insert_bounds(cf.Data([14, 26.]))

	aux2 = cf.Coordinate(
		data=cf.Data(numpy.arange(-45, 45, dtype='int32').reshape(10, 9),
					 units='degree_N'))
	aux2.standard_name = 'latitude'

	aux3 = cf.Coordinate(
		data=cf.Data(numpy.arange(60, 150, dtype='int32').reshape(9, 10),
					 units='degreesE'))
	aux3.standard_name = 'longitude'

	aux4 = cf.AuxiliaryCoordinate(
		data=cf.Data(['alpha','beta','gamma','delta','epsilon',
					  'zeta','eta','theta','iota','kappa']))
	aux4.standard_name = 'greek_letters'
	aux4.subspace[0] = cf.masked


	# Cell measures
	cm0 = cf.CellMeasure(
		data=cf.Data(1+numpy.arange(90.).reshape(9, 10)*1234, 'km 2'))
	cm0.measure = 'area'

	# Coordinate references
	coordref0 = cf.CoordinateReference(name='rotated_latitude_longitude',
									   grid_north_pole_latitude=38.0,
									   grid_north_pole_longitude=190.0)

	# Data
	data = cf.Data(numpy.arange(90.).reshape(10, 9), 'm s-1')

	# Domain
	domain = cf.Domain(dim=(dim0, dim1, dim2),
					   aux=[aux0, aux1, aux2, aux3, aux4],
					   measure={'cm0': cm0},
					   ref=(coordref0,),
					   assign_axes={'aux0': ['dim2'],
									'aux1': ['dim2']},
					   )

	properties = {'standard_name': 'eastward_wind'}

	f = cf.Field(properties=properties,
				 domain=domain,
				 data=data,
				 axes=['grid_latitude', 'grid_longitude']
				 )

	cf.write(f,'/tmp/cfpython.nc', fmt='NETCDF4')

if __name__ == '__main__':
	test_create_field()
