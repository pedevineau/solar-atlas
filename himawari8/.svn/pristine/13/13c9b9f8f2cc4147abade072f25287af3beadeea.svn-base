from general_utils.latlon import bounding_box as bb, visualize_map_3d as v3d
import os
from nclib.core.const_defs import ST_TIME_YEAR, ST_TIME_DAY_DATE, ST_TIME_DAY_DOY, ST_TIME_MONTH, ST_TIME_T61D, ST_DEG_5
from glob import glob
from nclib.core.segdataset.advanced_dataset import AdvancedDataset as ADset
from nclib.utils.time_utils import get_date_info_1980



def compute_segmentation(folder=None):
	def seg_const(segstr=None):
		for sclass in ST_TIME_YEAR, ST_TIME_DAY_DATE, ST_TIME_DAY_DOY, ST_TIME_MONTH, ST_TIME_T61D, ST_DEG_5:
			if segstr == str(sclass):
				return sclass
	if not folder.endswith('/'):
		folder+='/'
	pattern=folder + '*.nc'
	files = glob(pattern)
	rsegs = {}
	if files:

		prefixes = []
		spatial_segmentations = []
		temporal_segmentations = []
		for e in files:
			assert '.' in e
			try:
				dir, fn = os.path.split(e)
				parts = fn.split('.')[0].split('__')
				plen = len(parts)
				if plen > 3:
					raise Exception()
			except Exception:
				raise Exception('Failed to parse {}'.format(os.path.join(e)))

			prefixes.append(parts[0])
			for i in range(1, plen):
				seg = parts[i].split('_')[0]
				if seg.startswith('S'):
					spatial_segmentations.append(seg)
				elif seg.startswith('T'):
					temporal_segmentations.append(seg)

		uprefixes = set(prefixes)
		uspatial_segmentations = list(set(spatial_segmentations))
		# uspatial_segmentations = set(spatial_segmentations)
		utemporal_segmentations = set(temporal_segmentations)

		assert len(uprefixes) == 1, 'Inconsistent prefixes {0} were found in {1}'.format(uprefixes,folder)
		if spatial_segmentations:
			assert len(uspatial_segmentations) == 1, 'Inconsistent spatial segmentation {0} was found in {1}'.format(uspatial_segmentations, folder )
			rsegs['space'] = seg_const(uspatial_segmentations[0])
		if temporal_segmentations:
			assert len(utemporal_segmentations) == 1, 'Inconsistent temporal segmentation {0} was found in {1} for layer {2}'.format(utemporal_segmentations, folder)
			rsegs['time'] = seg_const(temporal_segmentations[0])
	return list(uprefixes)[0], rsegs



if __name__ == '__main__':

	infolder = 'LATLON'
	varname= 'VIS064_2000'
	date = '2015-07-20'
	vec_color = 'red'
	data_color='gray'
	di = get_date_info_1980(_date=date)
	slot_min = 1
	slot_max = 8

	inf = os.path.abspath(infolder)
	print 'Going to view channel {0} from folder {5} for dates {1}-{2} slots {3}-{4}'.format(varname, date, date, slot_min, slot_max, inf)
	prefix, segs = compute_segmentation(folder=inf)
	ds = ADset(file_prefix=prefix,read_dirs=[inf], seg_types=segs.values())
	boundaries=ds.get_boundaries()
	locals().update(boundaries)
	lat_min, lat_max = cell_boundaries['latitude']
	lon_min, lon_max = cell_boundaries['longitude']



	extent = coordinates.copy()

	extent.update(cell_boundaries)
	extent['dfb'] = di.dfb, di.dfb
	extent['slot'] = slot_min, slot_max
	data = ds.read(varname,bounds=extent)[0]
	_, nl, nc = data.shape
	lat_res = (lat_max-lat_min)/nl
	#lon_res = (lon_max-lon_min)/nc

	bbox = bb(xmin=lon_min, xmax=lon_max, ymin=lat_min, ymax=lat_max, width=nc, height=nl,resolution=lat_res)
	v3d(data, bbox=bbox, vmin=0, vmax=1,interpolation='nearest',countries_color=vec_color,coast_color=vec_color,color=data_color)
