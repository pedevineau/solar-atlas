__author__ = 'jano'
import os
import datetime
import logging
from himawari8.converters.nc2nc import h08geosnc2latlonnc_multislot, h08geosnc2latlonnc_mp, h08geosnc2latlonnc_1month
from himawari8.slotmapping import HIMAWARI_SLOTS
from nclib.core.const_defs import ST_DEG_5, ST_TIME_MONTH
from general_utils import daytimeconv, basic_mail
from general_utils.latlon import expand_segments
from traceback import print_exc
import multiprocessing as mp
from himawari8.utils import H08_CHANNEL_NAMES


logger = logging.getLogger()
logging.basicConfig()


def geosarchive2latlonarchive(in_geos_nc_folder=None, in_geos_nc_prefix=None,  out_latlon_nc_folder=None, out_latlon_nc_prefix=None, segments_to_process=None, channels_to_process=None, ll_start_date=None, ll_end_date=None, nc_latlon_space_segtype=None, nc_latlon_time_segtype=None, nc_latlon_chunksizes=None, email_receivers=None, slots=None, nc_latlon_resolution=None, log_level=None):
    # set logger
    logger.setLevel(log_level)


    slots_to_process = HIMAWARI_SLOTS.keys() if slots is None else slots # all slots so no point ot take it out
    hostname = os.uname()[1]


    start_date = datetime.datetime.strptime(ll_start_date, '%Y%m%d').date()
    start_dfb = daytimeconv.date2dfb(start_date)
    end_date = datetime.datetime.strptime(ll_end_date, '%Y%m%d').date()
    end_dfb = daytimeconv.date2dfb(end_date)
    prefix_len = len(in_geos_nc_prefix)

    ncfiles = [e  for e in sorted(os.listdir(in_geos_nc_folder)) ]
    start = datetime.datetime.now()
    for ncf in ncfiles:
        #guard
        if not '__' in ncf:
            continue
        logger.debug('CHECKING %s' % ncf)

        if ncf[:prefix_len] == in_geos_nc_prefix: #it seems to be a H08 NC DFBSLOT file

            ncfile_path = os.path.join(in_geos_nc_folder, ncf)
            first_chunk, second_chunk = ncf.split('__')
            prefix, n1, n2 = first_chunk.split('_')

            channel_name = '_'.join([n1, n2])
            channel_list = [int(k) for k, v in H08_CHANNEL_NAMES.items() if v == channel_name]
            if len(channel_list) == 1:
                channel_number = channel_list.pop()
                if channel_number in channels_to_process:
                    #first_chunk contains prefix and channel, second chunk contain segmentations
                    clean_chunk, ext = os.path.splitext(second_chunk)
                    str_time_seg, syear, smonth = clean_chunk.split('_')
                    file_start_dt = datetime.date(int(syear), int(smonth), 1)
                    file_start_dfb = daytimeconv.date2dfb(file_start_dt)
                    if daytimeconv.leapyear(int(syear)):
                        end_day = daytimeconv.month_days[1][int(smonth)]
                    else:
                        end_day = daytimeconv.month_days[0][int(smonth)]
                    file_end_dt = datetime.date(int(syear), int(smonth), int(end_day))
                    file_end_dfb = daytimeconv.date2dfb(file_end_dt)
                                        # cond for dates in different months
                    cond = (start_dfb<=file_start_dfb <= end_dfb)  or (start_dfb<=file_end_dfb<= end_dfb) or \
                           ((file_start_dfb<=start_dfb <= file_end_dfb)  or (file_start_dfb<=end_dfb<= file_end_dfb))
                                       # cond for dates in same month
                    if cond:


                        try:
                            logger.info('REPROJECTING %s  TO LATLON START DFB %s END DFB %s %s slots  ' % (ncfile_path, start_dfb, end_dfb, len(slots)))


                            h08geosnc2latlonnc_1month(ncfile_path=ncfile_path,
                                               out_latlon_nc_folder=out_latlon_nc_folder,
                                               out_latlon_nc_prefix=out_latlon_nc_prefix,
                                               segments_to_process=segments_to_process,
                                               start_dfb=start_dfb,
                                               end_dfb=end_dfb,
                                               slots=slots_to_process,
                                               out_nc_space_segtype=nc_latlon_space_segtype,
                                               out_nc_time_segtype=nc_latlon_time_segtype,
                                               out_nc_chunksizes=nc_latlon_chunksizes,
                                               out_nc_resolution=nc_latlon_resolution)


                        except Exception as e:
                            estr = 'Exception "{0}" occurred while reprojecting {1} to LATLON.'.format(print_exc(e), ncfile_path)
                            logger.error(estr)
                            basic_mail.mail_process_message_ssl(sender_from='Himawari8 h08geos2latlon on {0}'.format(hostname), reciever_to=email_receivers,subject='Himawari8 operational processing error.',message=estr)

                        except KeyboardInterrupt as ke:
                            raise
                    else:
                        logger.debug('skipping %s' % ncfile_path)
                        logger.debug('start_sfb {0}, file_start_sfb {1}, end_dfb {2}, file_end_dfb {3}'.format(start_dfb,file_start_dfb,end_dfb,file_end_dfb))
                        logger.debug('start date {0}, file_start_date {1}, end_date {2}, file_end_date {3}'.format(start_date,file_start_dt,end_date,file_end_dt))

                else:
                    logger.debug('Skipping {0} because it is not in the list of channels_to_process'.format(ncf))
            else:
                logger.debug('COULD NOT ESTABLISH THE CHANNEL FOR NETCDF %s ' % ncf)
    end = datetime.datetime.now()
    logger.debug('{0} files were processed in {1} '.format(len(ncfiles), end - start))

if __name__ == '__main__':

    ##################################################
    # IO FOLDERS
    ###################################################

    geos_nc_folder = '/mnt/temp'
    geos_nc_prefix = 'H08GEOS' #example of input geostationary DFBSLOT NC file H08GEOS_VIS064_2000__TMON_2015_10.nc
    out_nc_folder = '/home/jano/Desktop/himawari/OPERATIONAL/OUTNC/LATLON/'
    latlon_nc_prefix='H08LATLON'

    ##################################################
    # GENERAL PROCESSING
    ###################################################
    loglevel = 'DEBUG'
    '''  channel names
        ('01', 'VIS047_2000'), ('02', 'VIS051_2000'), ('03', 'VIS064_2000'), ('04', 'VIS086_2000'), ('05', 'VIS160_2000'), ('06', 'VIS229_2000'), ('07', 'IR390_2000'), ('08', 'IR620_2000'), ('09', 'IR690_2000'), ('10', 'IR730_2000'), ('11', 'IR860_2000'), ('12', 'IR960_2000'), ('13', 'IR104_2000'), ('14', 'IR112_2000'), ('15', 'IR124_2000'), ('16', 'IR133_2000'), ('18', 'VIS047_1000'), ('19', 'VIS051_1000'), ('20', 'VIS064_0500'), ('21', 'VIS086_1000')
    '''

    channels_to_process = [3, 7, 8, 13, 15] #so far numbers could be easily changed to channel names strings
    channels_to_process = [3] #so far numbers could be easily changed to channel names strings
    #segments_to_process = [[58, 66, 20, 25], [64, 66, 26, 26], [57, 65, 8, 11],[57, 62, 12, 13]]  # JAPAN + AUSTRALIA
    segments_to_process = [[57, 65, 8, 11], [57, 62, 12, 13], [57, 19], [58, 66, 20, 25], [64, 66, 26, 26]]# JAPAN + AUSTRALIA
    segments_to_process = [[57,57,17,17]]

    archive_start_date = '20160323'
    archive_end_date = '20160323'

    slots_to_process = [i for i in range(1, 145)] # have to be the valid slots

    ##################################################
    # COMPUTATINAL PROCESSING
    ###################################################

    min_nc_age_secs = 1



    # ##################################################
    # NC PROPERTIES
    ###################################################

    chunk_sizes = [4, 8, 32, 32]
    time_segtype = ST_TIME_MONTH  # latlon time segmentation type
    space_segtype = ST_DEG_5  # latlon space segmentation type DEG5X5
    nc_latlon_prefix = 'H08LATLON'  # the prefix for LATLON NC files
    nc_latlon_resolution = 2./60 # 2 arcmin degrees for all channels

    # ##################################################
    # # DATABASE
    # ###################################################
    # dbengine = 'postgresql'
    # host = 'dbsatarchive'
    # database = 'himawari_archive'
    # password = 'itNov6'
    # user = 'sat_oper'
    # port = 5432
    # conn_dict = {'dbengine': dbengine, 'host': host, 'port': port, 'database': database, 'user': user, 'password': password}

    ##################################################
    # EMAIL
    ###################################################

    # email_receivers = ['tomas.cebecauer@geomodel.eu', 'ioan.ferencik@geomodel.eu']
    email_receivers = ['ioan.ferencik@geomodel.eu']




    geosarchive2latlonarchive(	in_geos_nc_folder=geos_nc_folder,
                    in_geos_nc_prefix=geos_nc_prefix,
                    out_latlon_nc_folder=out_nc_folder,
                    out_latlon_nc_prefix=latlon_nc_prefix,
                    segments_to_process=segments_to_process,
                    slots=slots_to_process,
                    channels_to_process=channels_to_process,
                    ll_start_date=archive_start_date,
                    ll_end_date=archive_end_date,
                    nc_latlon_time_segtype=time_segtype,
                    nc_latlon_space_segtype=space_segtype,
                    nc_latlon_chunksizes=chunk_sizes,
                    nc_latlon_resolution=nc_latlon_resolution,
                    email_receivers = email_receivers,
                    log_level=loglevel)


